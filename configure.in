AC_INIT(sysiox, 0.1)

AC_CANONICAL_HOST

case "$host_os" in
  linux*)
        ;;
  *)
        AC_MSG_WARN('***' ${host_os}: Unsupported OS target)
        ;;
esac

AM_INIT_AUTOMAKE([subdir-objects])
AM_PROG_CC_C_O

AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_HEADER_STDC
AC_HEADER_STAT
AC_HEADER_TIME
AC_CHECK_HEADERS([fcntl.h limits.h stdlib.h string.h unistd.h])

AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_SIZE_T

AC_FUNC_MALLOC
AC_CHECK_FUNCS([ftruncate getpagesize memset strerror])

AC_MSG_CHECKING(for libsysio source directory)
SYSIO_SRC=`pwd`/../libsysio;
AC_ARG_WITH(sysio-src,
  AC_HELP_STRING([--with-sysio-src=<dir>], 
		 [libsysio source location, default=../libsysio]),
  [    case "${withval}" in
         yes|"");;
	 no)	SYSIO_SRC="";;
         *)	SYSIO_SRC=${withval};;
        esac])
AC_MSG_RESULT(${SYSIO_SRC})
AC_SUBST(SYSIO_SRC)
test -d ${SYSIO_SRC} || AC_MSG_ERROR(source directory not found)

AC_MSG_CHECKING(whether emulation lib is requested)
AC_ARG_WITH(emulation,
  AC_HELP_STRING([--with-emulation], [use list I/O emulator, default=yes]),
  [     case "${withval}" in
         yes) with_emulation=yes;;
         no)  with_emulation=no;;
         *) AC_MSG_ERROR(bad value ${withval} for --with-emulation) ;;
        esac])
test x${with_emulation} = x && with_emulation=yes;
AM_CONDITIONAL(WITH_EMULATION, test x${with_emulation} = xyes)
AC_MSG_RESULT($with_emulation)

AC_MSG_CHECKING(whether test build is requested)
AC_ARG_WITH(tests,
  AC_HELP_STRING([--with-tests],[build tests, default=yes]),
  [ 	case "${withval}" in
         yes) with_tests=yes;;
         no)  with_tests=no;;
         *) AC_MSG_ERROR(bad value ${withval} for --with-tests) ;;
        esac])
test x${with_tests} = x && with_tests=yes;
AM_CONDITIONAL(WITH_TESTS, test x${with_tests} = xyes)
AC_MSG_RESULT($with_tests)

AC_CONFIG_FILES([Makefile test/Makefile])
AC_OUTPUT
